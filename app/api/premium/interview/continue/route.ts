import { NextRequest, NextResponse } from "next/server";
import OpenAI from "openai";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Importera sessions fr√•n start route (i produktion: anv√§nd databas)
// Tempor√§r l√∂sning: skapa en global Map
declare global {
  var interviewSessions: Map<string, any>;
}

if (!global.interviewSessions) {
  global.interviewSessions = new Map();
}

const interviewSessions = global.interviewSessions;

export async function POST(request: NextRequest) {
  try {
    const { sessionId, userAnswer, questionNumber } = await request.json();

    // H√§mta session
    const session = interviewSessions.get(sessionId);
    if (!session) {
      return NextResponse.json(
        { error: "Session hittades inte" },
        { status: 404 }
      );
    }

    // L√§gg till anv√§ndarens svar
    session.messages.push({
      role: "user",
      content: userAnswer,
    });

    const totalQuestions = 12;
    const isLastQuestion = questionNumber >= totalQuestions - 1;

    if (isLastQuestion) {
      // Sista fr√•gan - avsluta intervjun
      const finalMessage = `Tack f√∂r att du tog dig tid! üéâ

Jag har nu all information jag beh√∂ver f√∂r att skapa din personliga AI-strategi. 

Din rapport genereras nu och kommer att skickas till din email inom 10-15 minuter. Den inneh√•ller:

‚úÖ Djupg√•ende analys av dina arbetsfl√∂den
‚úÖ Konkreta AI-verktyg anpassade f√∂r dig
‚úÖ Steg-f√∂r-steg implementeringsplan
‚úÖ Copy-paste prompts och mallar
‚úÖ Ber√§knad tidsbesparing per verktyg

Du f√•r √§ven tillg√•ng till din personliga support-chatt i 30 dagar d√§r jag kan svara p√• alla fr√•gor!`;

      session.messages.push({
        role: "assistant",
        content: finalMessage,
      });

      // Spara slutf√∂rd intervju
      session.completedAt = new Date().toISOString();
      interviewSessions.set(sessionId, session);

      return NextResponse.json({
        isComplete: true,
        finalMessage,
        sessionId,
      });
    }

    // Analysera senaste svaret
    const lastUserAnswer = session.messages[session.messages.length - 1].content;
    const isShortAnswer = lastUserAnswer.split(' ').length < 10;
    
    // Generera n√§sta fr√•ga
    const nextQuestionPrompt = `
Baserat p√• tidigare svar, st√§ll n√§sta relevanta fr√•ga (fr√•ga ${questionNumber + 1} av ${totalQuestions}).

SENASTE SVAR: "${lastUserAnswer}"
${isShortAnswer ? "‚ö†Ô∏è DETTA SVAR √ÑR F√ñR KORT! Be anv√§ndaren utveckla innan du g√•r vidare till ny fr√•ga." : ""}

FOKUSOMR√ÖDEN att t√§cka (prioritera de som saknas):
1. Typisk arbetsdag - konkret tidslinje (8:00, 9:00, etc.)
2. St√∂rsta tidsslukare - EXAKTA uppgifter (t.ex. "dokumentation tar 3h/dag")
3. Nuvarande verktyg - vilka system anv√§nder du? (Word, Excel, journalsystem, etc.)
4. Teknisk kompetens - p√• en skala 1-10, hur bekv√§m √§r du med ny teknik?
5. Samarbete - arbetar du ensam eller i team? Hur kommunicerar ni?
6. √Öterkommande uppgifter - vilka saker g√∂r du VARJE dag/vecka?
7. Dokumentation - hur mycket tid g√•r till rapporter, journaler, email?
8. Kommunikation - med vem pratar du mest? (kollegor/kunder/chefer)
9. Frustration - vad hade du velat automatisera bort?
10. M√•l - vad vill du uppn√• med AI? (mer tid, mindre stress, b√§ttre kvalitet?)
11. Inl√§rningstid - hur mycket tid kan du l√§gga p√• att l√§ra dig nya verktyg? (1h/vecka, 5h/vecka?)
12. Budget - hur mycket kan du/arbetsgivaren betala f√∂r AI-verktyg per m√•nad?

REGLER:
- Om svaret √§r f√∂r kort/vagt: Be om MER DETALJER p√• SAMMA omr√•de
- Om svaret √§r bra: G√• vidare till n√§sta fokusomr√•de
- Var specifik: Fr√•ga om EXAKTA siffror, KONKRETA exempel
- Anv√§nd f√∂ljdfr√•gor: "Du n√§mnde X, kan du ge ett exempel?"

St√§ll EN fr√•ga. Var personlig och empatisk. Endast fr√•gan, inget annat.`;

    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        ...session.messages,
        { role: "user", content: nextQuestionPrompt },
      ],
      temperature: 0.7,
      max_tokens: 150,
    });

    const nextQuestion = completion.choices[0].message.content || "Kan du ber√§tta mer?";

    session.messages.push({
      role: "assistant",
      content: nextQuestion,
    });

    // Uppdatera session
    interviewSessions.set(sessionId, session);

    return NextResponse.json({
      isComplete: false,
      nextQuestion,
      questionNumber: questionNumber + 1,
    });
  } catch (error) {
    console.error("Error continuing premium interview:", error);
    return NextResponse.json(
      { error: "Kunde inte forts√§tta intervjun" },
      { status: 500 }
    );
  }
}

